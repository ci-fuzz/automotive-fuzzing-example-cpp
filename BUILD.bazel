load("@rules_cc//cc:defs.bzl", "cc_library")


cc_library(
    name = "AUTOMOTIVE-FUZZING-EXAMPLE-CPP",
    srcs = [
        "modules/crypto_module/src/crypto_module_1.cpp",
        "modules/crypto_module/src/crypto_module_2.cpp",
        "modules/time_module/src/time_module_1.cpp",
        "modules/GPS_module/src/GPS_module_1.cpp",
        "modules/key_management_module/src/key_management_module_1.cpp"
    ],
    hdrs = [
        "modules/crypto_module/src/crypto_module_1.h",
        "modules/crypto_module/src/crypto_module_2.h",
        "modules/crypto_module/src/crypto_module_types.h",
        "modules/GPS_module/src/GPS_module_1.h",
        "modules/GPS_module/src/GPS_module_types.h",
        "modules/key_management_module/src/key_management_module_1.h",
        "modules/key_management_module/src/key_management_module_types.h",
        "modules/time_module/src/time_module_1.h"
    ],
    includes = [
        "modules/crypto_module/src",
        "modules/time_module/src",
        "modules/key_management_module/src",
        "modules/GPS_module/src"
    ],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "unit_tests",
    size = "small",
    srcs = [
        "test/simple_unit_test.cpp",
    ],
    deps = [
        ":AUTOMOTIVE-FUZZING-EXAMPLE-CPP",
        "@com_google_googletest//:gtest_main"
    ]
)

load("@rules_fuzzing//fuzzing:cc_defs.bzl", "cc_fuzz_test")

cc_fuzz_test(
    name = "my_fuzz_test_1",
    srcs = ["my_fuzz_test_1.cpp"],
    corpus = glob(
        ["my_fuzz_test_1_inputs/**"],
        allow_empty = True,
    ),
    deps = [
        "@cifuzz",
        ":AUTOMOTIVE-FUZZING-EXAMPLE-CPP",
        "@com_google_googletest//:gtest"
    ],
)